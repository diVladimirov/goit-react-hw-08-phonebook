{"version":3,"file":"static/js/contacts-page.d1ce29c6.chunk.js","mappings":"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","sources":["components/Contacts/Form/ContactsForm.js","components/Contacts/List/ContactsList.js","components/Contacts/Filter/ContactsFilter.js","components/Modal/Modal.js","pages/ContactsPage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport contactOperations from '../../../redux/contacts/contactsOperations';\nimport { Box, Button, Typography, Modal, TextField, Grid } from '@mui/material';\nimport AddCircleOutlineOutlinedIcon from '@mui/icons-material/AddCircleOutlineOutlined';\n\nconst ContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const items = useSelector(state => state.contacts.items);\n  const [openModal, setOpenModal] = useState(false);\n\n  useEffect(() => {\n    dispatch(contactOperations.fetchContacts());\n  }, [dispatch]);\n\n  const handleOpenModal = () => setOpenModal(true);\n  const handleCloseModal = () => setOpenModal(false);\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const nameToAdd = items.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    // console.log(nameToAdd);\n    if (nameToAdd) {\n      return alert(`${name} is already in contacts.`);\n    }\n    dispatch(contactOperations.createNewContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <Button\n        onClick={handleOpenModal}\n        variant=\"contained\"\n        sx={{ marginBottom: 2 }}\n        startIcon={<AddCircleOutlineOutlinedIcon />}\n      >\n        Add new contact\n      </Button>\n      <Modal open={openModal} onClose={handleCloseModal}>\n        <Box\n          sx={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: 400,\n            bgcolor: 'background.paper',\n            border: '2px solid #000',\n            boxShadow: 24,\n            p: 4,\n            borderRadius: 2,\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\" sx={{ textAlign: 'center' }}>\n            Create new contact\n          </Typography>\n          <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 3 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  autoComplete=\"given-name\"\n                  name=\"name\"\n                  required\n                  fullWidth\n                  id=\"name\"\n                  label=\"Name\"\n                  autoFocus\n                  type=\"text\"\n                  value={name}\n                  onChange={handleChange}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  name=\"number\"\n                  required\n                  fullWidth\n                  id=\"number\"\n                  label=\"Number\"\n                  type=\"tel\"\n                  value={number}\n                  onChange={handleChange}\n                />\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Create\n            </Button>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              onClick={handleCloseModal}\n              sx={{ mb: 2 }}\n            >\n              Close\n            </Button>\n          </Box>\n        </Box>\n      </Modal>\n    </>\n  );\n};\n\nexport default ContactsForm;\n","import {\n  TableContainer,\n  Paper,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Stack,\n  IconButton,\n  Box,\n  Tooltip,\n} from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\n// import ContactsListLi from '../ListItem/ContactsListLi';\nimport contactsOpearations from '../../../redux/contacts/contactsOperations';\nimport { openModal } from 'redux/contacts/contactsReducers';\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\n\nconst ContactsList = () => {\n  const items = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  const filteredContacts = items.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  return (\n    <>\n      {/* <div>\n        <ul>\n          {filteredContacts.map(({ id, name, number }) => (\n            <ContactsListLi key={id} id={id} name={name} number={number} />\n          ))}\n        </ul>\n      </div> */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Number</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredContacts.map(({ id, name, number }) => (\n              <TableRow key={id}>\n                <TableCell>{name}</TableCell>\n                <TableCell>\n                  <Box\n                    sx={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'space-between',\n                    }}\n                  >\n                    {number}\n                    <Stack direction=\"row\">\n                      <Tooltip title=\"Edit\">\n                        <IconButton onClick={() => dispatch(openModal(id))}>\n                          <EditOutlinedIcon />\n                        </IconButton>\n                      </Tooltip>\n                      <Tooltip title=\"Delete\">\n                        <IconButton\n                          onClick={() =>\n                            dispatch(contactsOpearations.deleteContact(id))\n                          }\n                        >\n                          <DeleteOutlineOutlinedIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </Stack>\n                  </Box>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default ContactsList;\n","import { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/contacts/contactsReducers';\n\nimport { Box, TextField } from '@mui/material';\n\nconst ContactsFilter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    dispatch(updateFilter(event.currentTarget.value));\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        my: '16px',\n      }}\n    >\n      <TextField\n        fullWidth\n        type=\"search\"\n        name=\"filter\"\n        label=\"Type name to find\"\n        variant=\"standard\"\n        onChange={handleChange}\n      />\n    </Box>\n  );\n};\n\nexport default ContactsFilter;\n","import { createPortal } from 'react-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport contactsOperations from '../../redux/contacts/contactsOperations';\nimport { Box, Grid, Button, TextField, Typography } from '@mui/material';\nimport { closeModal } from 'redux/contacts/contactsReducers';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = () => {\n  const [id, setId] = useState('');\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const editContact = useSelector(state => state.contacts.editContact);\n\n  useEffect(() => {\n    setId(editContact[0].id);\n    setName(editContact[0].name);\n    setNumber(editContact[0].number);\n  }, [editContact]);\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch(contactsOperations.updateContact({ id, name, number }));\n    dispatch(closeModal());\n  };\n\n  return createPortal(\n    // <div>\n    //   <div>\n    //     <form onSubmit={handleSubmit}>\n    //       <label>\n    //         Name\n    //         <input\n    //           type=\"text\"\n    //           value={name}\n    //           onChange={handleChange}\n    //           name=\"name\"\n    //           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    //           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    //           required\n    //         />\n    //       </label>\n    //       <label>\n    //         Number\n    //         <input\n    //           type=\"tel\"\n    //           value={number}\n    //           onChange={handleChange}\n    //           name=\"number\"\n    //           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n    //           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n    //           required\n    //         />\n    //       </label>\n    //       <button type=\"submit\">Save</button>\n    //       <button type=\"button\" onClick={() => dispatch(closeModal())}>\n    //         Close\n    //       </button>\n    //     </form>\n    //   </div>\n    // </div>,\n    <Box\n      sx={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: 400,\n        bgcolor: 'background.paper',\n        border: '2px solid #000',\n        boxShadow: 24,\n        p: 4,\n        borderRadius: 2,\n      }}\n    >\n      <Typography component=\"h1\" variant=\"h5\" sx={{ textAlign: 'center' }}>\n        Edit contact\n      </Typography>\n      <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 3 }}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <TextField\n              autoComplete=\"given-name\"\n              name=\"name\"\n              required\n              fullWidth\n              id=\"name\"\n              label=\"Name\"\n              autoFocus\n              type=\"text\"\n              value={name}\n              onChange={handleChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              name=\"number\"\n              required\n              fullWidth\n              id=\"number\"\n              label=\"Number\"\n              type=\"tel\"\n              value={number}\n              onChange={handleChange}\n            />\n          </Grid>\n        </Grid>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          onClick={handleSubmit}\n          sx={{ mt: 3, mb: 2 }}\n        >\n          Save edit contact\n        </Button>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          onClick={() => dispatch(closeModal())}\n          sx={{ mb: 2 }}\n        >\n          Close\n        </Button>\n      </Box>\n    </Box>,\n    modalRoot\n  );\n};\n\nexport default Modal;\n","import { useSelector } from 'react-redux';\nimport ContactsForm from 'components/Contacts/Form/ContactsForm';\nimport ContactsList from 'components/Contacts/List/ContactsList';\nimport ContactsFilter from 'components/Contacts/Filter/ContactsFilter';\nimport Modal from 'components/Modal/Modal';\nimport { Box, Container } from '@mui/material';\n\nconst ContactsPage = () => {\n  const showModal = useSelector(state => state.contacts.showModal);\n  return (\n    <>\n      <Box component=\"main\">\n        <Container>\n          <ContactsFilter />\n          <ContactsForm />\n          <ContactsList />\n        </Container>\n      </Box>\n      {showModal && <Modal />}\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["useState","name","setName","number","setNumber","dispatch","useDispatch","items","useSelector","state","contacts","openModal","setOpenModal","useEffect","contactOperations","handleCloseModal","handleChange","target","value","Button","onClick","variant","sx","marginBottom","startIcon","AddCircleOutlineOutlined","Modal","open","onClose","Box","position","top","left","transform","width","bgcolor","border","boxShadow","p","borderRadius","Typography","component","textAlign","onSubmit","event","preventDefault","find","contact","toLowerCase","alert","mt","Grid","container","spacing","item","xs","TextField","autoComplete","required","fullWidth","id","label","autoFocus","type","onChange","mb","filter","filteredContacts","includes","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","display","alignItems","justifyContent","Stack","direction","Tooltip","title","IconButton","EditOutlined","contactsOpearations","DeleteOutlineOutlined","my","updateFilter","currentTarget","modalRoot","document","querySelector","setId","editContact","handleSubmit","contactsOperations","closeModal","createPortal","showModal","Container"],"sourceRoot":""}